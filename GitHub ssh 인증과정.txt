신규 레포지토리 생성시, 아래와 같이 로컬 레포지토리와 연결하기 위한 커맨드가 제공된다.
HTTPS	https://github.com/WDK1111/git-study.git
SSH	git@github.com:WDK1111/git-study.git

…or create a new repository on the command line
(신규 저장소 생성)
echo "# git-study" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/WDK1111/git-study.git
git push -u origin main

…or push an existing repository from the command line
(기존 저장소 사용)
git remote add origin https://github.com/WDK1111/git-study.git
git branch -M main
git push -u origin main

위 커맨드 사용 전에 먼저 인증방식(HTTPS, SSH)를 결정하고 아래과정을 진행.

1. SSH 인증
구글에서 ssh keygen github 검색하여 깃허브 문서 확인(SSH 키 생성 및 입력과정)
https://docs.github.com/ko/enterprise-cloud@latest/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

Git Bash(기타 터미널)에서 이하 입력
$ ssh-keygen -t ed25519 -C "your_email@example.com"

입력시 아래와 같이 메시지 생성
> Generating public/private ALGORITHM key pair.
> Enter a file in which to save the key (/home/YOU/.ssh/id_ALGORITHM):[Press enter]

바로 엔터를 쳐도 되지만, 보통 id_ALGORITHM <= 이 부분을 사용자가 지정한 이름으로 저장.
id_ed25519		// 개인키
id_ed25519.pub 		// 공개키, 깃허브계정에 등록
파일 두개 생성됨
(이미 만들어진 키가 있는지 확인 필요)

>Enter passphrase (empty for no passphrase):
>Enter same passphrase again:

패스워드 설정 여부 물으면 필요에 따라 지정. 패스워드가 있으면
작업시마다 패스워드 입력해야 하므로 아래처럼 ssh-agent에 등록 필요.
패스워드가 없다해도 등록해야 오류 피할수 있음

$ eval $(ssh-agent)			// ssh-agent 실행, agent에 개인키 등록하여 패스워드 입력 생략. 
>Agent pid 403			// ssh 정상동작 확인
$ ssh-add ~/.ssh/id_ed25519		// 위에서 생성한 파일 경로 입력
>Identity added : /home/YOU/.ssh/id_ALGORITHM (yourmail@~~.com)	// 메일주소 확인할것
$touch /home/YOU/.ssh/.config
$vim /home/YOU/.ssh/.config
Host github.com
  Hostname ssh.github.com
  Port 443		// .config에 추가 혹은 저장
  User git			// 443 포트는 ssh.github.com HTTPS 포트.
			// 22 포트는 git@github.com SSH 포트, 자동으로 연결되지만
			// 네트워크 환경에 따라 22가 막힐경우를 대비해 이렇게 우회연결 설정.
$cat ~/.ssh/id_ed25519.pub
>~~~~~~~~~~~		// 내용물 키 복사






깃허브 계정 세팅Setting-> SSH and GPG keys -> New SSH key
key 란에 복사한 키 기입하여 추가

2. 깃 구성
git config --global user.name "your_username"
git config --global user.email "your_email_address@example.com"
git config --global --list     // 확인 명령어
깃허브 계정의 이메일과 어카운트 네임(프로필 아님)을 로컬 깃 설정에 입력.

3. 정상동작 확인
$ ssh -T git@github.com
>Hi WDK1111! You've successfully authenticated, but GitHub does not provide shell access.
위처럼 정상 메시지가 뜨지 않고 에러 발생시 문제 점검.

$ git remote -v
원격저장소 링크 확인